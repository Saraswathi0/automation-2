# -*- coding: utf-8 -*-
"""Untitled55.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZWJjODV-vKC_xG6PPvo9P5bwb9nAEVT-
"""

import streamlit as st
import bcrypt
import json
import os
import random
import pandas as pd
from datetime import datetime

# ==========================================================
# ---------------------- FILE PATHS -------------------------
# ==========================================================

USER_FILE = "users.json"
OTP_FILE = "otp_codes.json"
AUDIT_FILE = "audit_log.csv"
FORM_FILE = "insurance_data.csv"

# ==========================================================
# ---------------------- INIT STORAGE -----------------------
# ==========================================================

def init_files():
    if not os.path.exists(USER_FILE):
        users = {
            "admin": {
                "password": bcrypt.hashpw("admin123".encode(), bcrypt.gensalt()).decode(),
                "role": "Admin"
            },
            "staff": {
                "password": bcrypt.hashpw("staff123".encode(), bcrypt.gensalt()).decode(),
                "role": "Staff"
            },
            "viewer": {
                "password": bcrypt.hashpw("viewer123".encode(), bcrypt.gensalt()).decode(),
                "role": "Viewer"
            }
        }
        with open(USER_FILE, "w") as f:
            json.dump(users, f, indent=4)

    if not os.path.exists(OTP_FILE):
        with open(OTP_FILE, "w") as f:
            json.dump({}, f)

    if not os.path.exists(AUDIT_FILE):
        df = pd.DataFrame(columns=["Timestamp", "Username", "Role", "Action"])
        df.to_csv(AUDIT_FILE, index=False)

init_files()

# ==========================================================
# ---------------------- HELPERS ----------------------------
# ==========================================================

def load_users():
    with open(USER_FILE, "r") as f:
        return json.load(f)

def save_users(users):
    with open(USER_FILE, "w") as f:
        json.dump(users, f, indent=4)

def log_action(username, role, action):
    df = pd.DataFrame([[datetime.now(), username, role, action]],
                      columns=["Timestamp", "Username", "Role", "Action"])
    df.to_csv(AUDIT_FILE, mode="a", header=False, index=False)

def generate_otp(username):
    otp = str(random.randint(100000, 999999))
    with open(OTP_FILE, "r") as f:
        otps = json.load(f)
    otps[username] = otp
    with open(OTP_FILE, "w") as f:
        json.dump(otps, f)
    return otp  # Show OTP on screen (simulated email)

def verify_otp(username, otp_input):
    with open(OTP_FILE, "r") as f:
        otps = json.load(f)
    if username in otps and otps[username] == otp_input:
        return True
    return False

def load_form_data():
    if os.path.exists(FORM_FILE):
        return pd.read_csv(FORM_FILE)
    return pd.DataFrame()

def save_form(entry):
    df_new = pd.DataFrame([entry])
    if os.path.exists(FORM_FILE):
        df_new.to_csv(FORM_FILE, mode='a', header=False, index=False)
    else:
        df_new.to_csv(FORM_FILE, index=False)

# ==========================================================
# ---------------------- SESSION VARS -----------------------
# ==========================================================

if "logged_in" not in st.session_state:
    st.session_state.logged_in = False
if "role" not in st.session_state:
    st.session_state.role = None
if "username" not in st.session_state:
    st.session_state.username = None
if "otp_sent" not in st.session_state:
    st.session_state.otp_sent = False

# ==========================================================
# ---------------------- LOGIN PAGE -------------------------
# ==========================================================

st.title("üîê Multi-User Insurance System")

menu = st.sidebar.selectbox("Menu", ["üìù Fill Form", "üîê Login", "üìä Dashboard"])

# ===================== LOGIN FLOW =========================
if menu == "üîê Login":
    st.header("User Login (with OTP)")

    users = load_users()
    username = st.text_input("Username")
    password = st.text_input("Password", type="password")

    if st.button("Generate OTP"):
        if username in users:
            hashed = users[username]["password"].encode()
            if bcrypt.checkpw(password.encode(), hashed):
                otp = generate_otp(username)
                st.session_state.otp_sent = True
                st.success(f"‚úÖ OTP sent to your email (SIMULATED): **{otp}**")
            else:
                st.error("‚ùå Incorrect password")
        else:
            st.error("‚ùå User does not exist")

    if st.session_state.otp_sent:
        otp_input = st.text_input("Enter OTP")
        if st.button("Login"):
            if verify_otp(username, otp_input):
                st.session_state.logged_in = True
                st.session_state.username = username
                st.session_state.role = users[username]["role"]
                log_action(username, st.session_state.role, "Logged in")
                st.success(f"‚úÖ Login successful! Welcome {username}")
            else:
                st.error("‚ùå Invalid OTP")

# ==========================================================
# ---------------------- FORM PAGE --------------------------
# ==========================================================

if menu == "üìù Fill Form":
    st.header("Insurance Form")

    name = st.text_input("Name")
    gender = st.selectbox("Gender", ["Male", "Female", "Other"])
    age = st.number_input("Age", 0, 120)
    contact = st.text_input("Contact Number")
    dob = st.date_input("Date of Birth")

    hospital = st.text_input("Hospital Name")
    policy = st.text_input("Policy Number")

    if st.button("Submit Form"):
        entry = {
            "Timestamp": datetime.now(),
            "Name": name,
            "Gender": gender,
            "Age": age,
            "Contact": contact,
            "DOB": dob,
            "Hospital": hospital,
            "Policy": policy
        }
        save_form(entry)
        if st.session_state.logged_in:
            log_action(st.session_state.username, st.session_state.role, "Submitted Form")
        st.success("‚úÖ Form submitted successfully")

# ==========================================================
# ---------------------- DASHBOARD --------------------------
# ==========================================================

if menu == "üìä Dashboard":

    if not st.session_state.logged_in:
        st.warning("üîê Please login to view dashboard")
        st.stop()

    role = st.session_state.role
    username = st.session_state.username

    st.header(f"üìä Dashboard ({role})")
    log_action(username, role, "Viewed Dashboard")

    df = load_form_data()

    # -------- Viewer (read-only) --------
    if role == "Viewer":
        st.subheader("Read-Only Form Data")
        st.dataframe(df)

    # -------- Staff (limited filtering) --------
    if role == "Staff":
        st.subheader("Staff Data View")
        name_filter = st.text_input("Filter by Name")

        filtered = df[df["Name"].str.contains(name_filter, case=False)] if name_filter else df

        st.dataframe(filtered)

    # -------- Admin (full access) --------
    if role == "Admin":
        st.subheader("üîß Admin Panel: Full Access")
        st.dataframe(df)

        st.subheader("üë§ Audit Trail")
        audit = pd.read_csv(AUDIT_FILE)
        st.dataframe(audit)

        st.subheader("‚ûï Add New User")
        new_user = st.text_input("New Username")
        new_pass = st.text_input("New Password", type="password")
        new_role = st.selectbox("Select Role", ["Admin", "Staff", "Viewer"])

        if st.button("Create User"):
            users = load_users()
            if new_user in users:
                st.error("‚ùå User already exists")
            else:
                hashed = bcrypt.hashpw(new_pass.encode(), bcrypt.gensalt()).decode()
                users[new_user] = {"password": hashed, "role": new_role}
                save_users(users)
                log_action(username, role, f"Created new user: {new_user}")
                st.success("‚úÖ User created successfully")

    if st.button("Logout"):
        log_action(username, role, "Logged out")
        st.session_state.logged_in = False
        st.session_state.username = None
        st.session_state.role = None
        st.success("‚úÖ Logged out successfully")