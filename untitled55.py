# -*- coding: utf-8 -*-
"""Untitled55.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZWJjODV-vKC_xG6PPvo9P5bwb9nAEVT-
"""
import streamlit as st
import hashlib
import json
import os
import random
import pandas as pd
from datetime import datetime

# ==========================================================
# ---------------------- FILE PATHS -------------------------
# ==========================================================

USER_FILE = "users.json"
OTP_FILE = "otp_codes.json"
AUDIT_FILE = "audit_log.csv"
FORM_FILE = "insurance_data.csv"


# ==========================================================
# ---------------- SHA256 PASSWORD HASHING ------------------
# ==========================================================

def hash_password(pwd):
    return hashlib.sha256(pwd.encode()).hexdigest()

def verify_password(input_password, stored_hash):
    return hash_password(input_password) == stored_hash


# ==========================================================
# ---------------------- INIT FILES -------------------------
# ==========================================================

def init_files():
    if not os.path.exists(USER_FILE):
        users = {
            "admin": {
                "password": hash_password("admin123"),
                "role": "Admin"
            }
        }
        with open(USER_FILE, "w") as f:
            json.dump(users, f, indent=4)

    if not os.path.exists(OTP_FILE):
        with open(OTP_FILE, "w") as f:
            json.dump({}, f)

    if not os.path.exists(AUDIT_FILE):
        df = pd.DataFrame(columns=["Timestamp", "Username", "Role", "Action"])
        df.to_csv(AUDIT_FILE, index=False)

init_files()


# ==========================================================
# ---------------------- HELPERS ----------------------------
# ==========================================================

def load_users():
    with open(USER_FILE, "r") as f:
        return json.load(f)

def save_users(users):
    with open(USER_FILE, "w") as f:
        json.dump(users, f, indent=4)

def generate_otp(username):
    otp = str(random.randint(100000, 999999))
    with open(OTP_FILE, "r") as f:
        otp_data = json.load(f)
    otp_data[username] = otp
    with open(OTP_FILE, "w") as f:
        json.dump(otp_data, f)
    return otp

def verify_otp(username, otp_input):
    with open(OTP_FILE, "r") as f:
        otp_data = json.load(f)
    return otp_data.get(username, None) == otp_input

def log_action(username, role, action):
    df = pd.DataFrame([[datetime.now(), username, role, action]],
                      columns=["Timestamp", "Username", "Role", "Action"])
    df.to_csv(AUDIT_FILE, mode='a', header=False, index=False)

def save_form(entry):
    df_new = pd.DataFrame([entry])
    if os.path.exists(FORM_FILE):
        df_new.to_csv(FORM_FILE, mode='a', header=False, index=False)
    else:
        df_new.to_csv(FORM_FILE, index=False)

def load_form_data():
    if os.path.exists(FORM_FILE):
        return pd.read_csv(FORM_FILE)
    return pd.DataFrame()


# ==========================================================
# ----------------------- SESSION ---------------------------
# ==========================================================

if "page" not in st.session_state:
    st.session_state.page = "login"

if "logged_in" not in st.session_state:
    st.session_state.logged_in = False

if "otp_sent" not in st.session_state:
    st.session_state.otp_sent = False


# ==========================================================
# ---------------------- LOGIN PAGE -------------------------
# ==========================================================

def login_page():
    st.title("üîê Insurance System Login")

    st.write("If you don't have an account, create one below.")

    users = load_users()

    username = st.text_input("Username")
    password = st.text_input("Password", type="password")

    col1, col2 = st.columns(2)

    # ----------- Login button -----------
    with col1:
        if st.button("Send OTP"):
            if username in users and verify_password(password, users[username]["password"]):
                otp = generate_otp(username)
                st.session_state.otp_sent = True
                st.success(f"‚úÖ OTP sent (Simulated): **{otp}**")
            else:
                st.error("‚ùå Invalid username or password")

    # ----------- Create Account ----------
    with col2:
        if st.button("Create Account"):
            st.session_state.page = "register"

    # ----------- OTP Verification --------
    if st.session_state.otp_sent:
        otp_input = st.text_input("Enter OTP")

        if st.button("Login"):
            if verify_otp(username, otp_input):
                st.session_state.logged_in = True
                st.session_state.username = username
                st.session_state.role = users[username]["role"]
                log_action(username, st.session_state.role, "Logged In")
                st.session_state.page = "form"
                st.success("‚úÖ Login successful!")
            else:
                st.error("‚ùå Invalid OTP")


# ==========================================================
# -------------------- REGISTRATION PAGE --------------------
# ==========================================================

def register_page():
    st.title("üÜï Create New Account")

    new_user = st.text_input("Choose a Username")
    new_pass = st.text_input("Choose a Password", type="password")
    new_role = st.selectbox("Select Role", ["Viewer", "Staff"])

    if st.button("Create Account"):
        users = load_users()
        if new_user in users:
            st.error("‚ùå Username already exists")
        else:
            users[new_user] = {
                "password": hash_password(new_pass),
                "role": new_role
            }
            save_users(users)
            st.success("‚úÖ Account created successfully! Please login.")
            st.session_state.page = "login"


# ==========================================================
# ---------------------- FORM PAGE --------------------------
# ==========================================================

def form_page():
    st.title("üìù Insurance Form")

    if not st.session_state.logged_in:
        st.warning("Please login first.")
        st.session_state.page = "login"
        return

    st.write("Fill the details below:")

    name = st.text_input("Name")
    gender = st.selectbox("Gender", ["Male", "Female", "Other"])
    age = st.number_input("Age", 0, 120)
    contact = st.text_input("Contact Number")
    dob = st.date_input("Date of Birth")
    hospital = st.text_input("Hospital Name")
    policy = st.text_input("Policy Number")

    if st.button("Submit"):
        entry = {
            "Timestamp": datetime.now(),
            "Name": name,
            "Gender": gender,
            "Age": age,
            "Contact": contact,
            "DOB": dob,
            "Hospital": hospital,
            "Policy": policy
        }
        save_form(entry)
        log_action(st.session_state.username, st.session_state.role, "Submitted Form")
        st.success("‚úÖ Form Submitted Successfully!")


    if st.button("Go to Dashboard"):
        st.session_state.page = "dashboard"


# ==========================================================
# ---------------------- DASHBOARD --------------------------
# ==========================================================

def dashboard_page():

    if not st.session_state.logged_in:
        st.warning("Please login first.")
        st.session_state.page = "login"
        return

    st.title("üìä Dashboard")
    role = st.session_state.role

    df = load_form_data()

    if role == "Viewer":
        st.subheader("Read-Only Records")
        st.dataframe(df)

    if role == "Staff":
        st.subheader("Filter Records")
        filter_name = st.text_input("Filter by name")
        filtered = df[df["Name"].str.contains(filter_name, case=False)] if filter_name else df
        st.dataframe(filtered)

    if role == "Admin":
        st.subheader("All Records")
        st.dataframe(df)

        st.subheader("Audit Log")
        audit = pd.read_csv(AUDIT_FILE)
        st.dataframe(audit)

        st.subheader("Add User")
        new_user = st.text_input("Username")
        new_pass = st.text_input("Password", type="password")
        new_role = st.selectbox("Role", ["Admin", "Staff", "Viewer"])

        if st.button("Create User"):
            users = load_users()
            if new_user in users:
                st.error("User already exists")
            else:
                users[new_user] = {"password": hash_password(new_pass), "role": new_role}
                save_users(users)
                st.success("User created")

    if st.button("Logout"):
        st.session_state.logged_in = False
        st.session_state.page = "login"
        st.success("Logged out!")


# ==========================================================
# ---------------------- PAGE CONTROLLER --------------------
# ==========================================================

if st.session_state.page == "login":
    login_page()

elif st.session_state.page == "register":
    register_page()

elif st.session_state.page == "form":
    form_page()

elif st.session_state.page == "dashboard":
    dashboard_page()

